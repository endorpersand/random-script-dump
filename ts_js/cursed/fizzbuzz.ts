type Cons<T extends unknown[], E> = [...T, E];
type Tuple<T, N extends Numeric> = N extends 0 ? [] : Cons<Tuple<T, Decrement[N]>, T>;
type Keys<N extends Numeric> = N extends 0 ? [] : Cons<Keys<Decrement[N]>, Decrement[N]>;

type Keys256 = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251,
    252,
    253,
    254,
    255
];

type Zip<X extends unknown[], Y extends unknown[], B extends unknown[] = []> = 
    X extends [infer X1, ...infer X2] ?
        Y extends [infer Y1, ...infer Y2] ?
            Zip<X2, Y2, [...B, [X1, Y1]]>
        : B
    : B;

type Keyable = string | number | symbol;
type FromEntries<O extends unknown[]> = AsIntersect<{[I in keyof O]: 
    O[I] extends [infer K extends Keyable, infer V] ? {[_ in K]: V} : never
}[number]>;
type AsIntersect<U extends {}> = (U extends any ? (x: U) => void : never) extends (x: infer X) => void ? X : never

type Shift<A extends unknown[]> = A extends [unknown, ...infer A2] ? A2 : never;
type Decrement = FromEntries<Zip<Keys256, [0, ...Keys256]>>;
type Increment = FromEntries<Zip<Keys256, [...Shift<Keys256>, 255]>>;

type Numeric = Keys256[number];

type LessThan<A extends Numeric, B extends Numeric> = 
    A extends 0 ? 
        B extends 0 ? false : true
    : B extends 0 ? 
        false
    : A extends B ?
        false
    : LessThan<Decrement[A], B>;
type Equal<A extends Numeric, B extends Numeric> = A extends B ? true : false;

type IncrMod<A extends Numeric, M extends Numeric> = 
    Decrement[M] extends infer M1 extends number ? 
        LessThan<A, M> extends true ? 
            A extends M1 ? 0 : Increment[A]
        : never
    : never;

type FizzBuzz<
    N extends Numeric, 
    C extends Numeric = 1,
    C3 extends 0 | 1 | 2 = 1, 
    C5 extends 0 | 1 | 2 | 3 | 4 = 1, 
    B extends unknown[] = []
> =
    C extends Increment[N] ? B :
        FizzBuzz<
            N,
            Increment[C], 
            IncrMod<C3, 3>, 
            IncrMod<C5, 5>,
            [...B, 
                C3 extends 0 ? 
                    C5 extends 0 ? "FizzBuzz" : "Fizz"
                : C5 extends 0 ? "Buzz" : C
            ]
        >;

let fb: FizzBuzz<100>;
export {};
